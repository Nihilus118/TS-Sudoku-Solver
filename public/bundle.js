(()=>{"use strict";var __webpack_modules__={547:()=>{eval('\n;// CONCATENATED MODULE: ./src/sudoku.ts\n// Wir wahrscheinlich soll es sein, dass ein Kästchen wieder geleert wird\nfunction generate(difficulty = 2) {\n    let grid = {\n        rows: [\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0]\n        ]\n    };\n    // Die erste Zeile ist Zufall, danach lassen wir unseren Solver auf das Grid los\n    grid.rows[0] = [1, 2, 3, 4, 5, 6, 7, 8, 9].sort(() => (Math.random() > .5) ? 1 : -1);\n    solve(grid);\n    // Jetzt müssen wir aus der fertig Lösung wieder ein paar Felder auf 0 setzen\n    for (let y = 0; y < grid.rows.length; y++) {\n        for (let x = 0; x < grid.rows[y].length; x++) {\n            // Je höher die Schwierigkeit, umso wahrscheinlicher wird das Feld geleert\n            // Zufallswerte 0 bis 4\n            if (Math.floor(Math.random() * 7) < difficulty) {\n                grid.rows[y][x] = 0;\n            }\n        }\n    }\n    return grid;\n}\nfunction isPossible(grid, y, x, n) {\n    // Haben wie die Zahl die wir eintragen wollen schon in der Reihe? -> Alle Felder in Reihe mit neuem Wert vergleichen\n    for (let i = 0; i < 9; i++) {\n        if (grid.rows[y][i] == n) {\n            return false;\n        }\n    }\n    // Haben wie die Zahl die wir eintragen wollen schon in der Spalte? -> Alle Felder in Spalte mit neuem Wert vergleichen\n    for (let i = 0; i < 9; i++) {\n        if (grid.rows[i][x] == n) {\n            return false;\n        }\n    }\n    // Juhu, nur noch im aktuellen Block (3x3) prüfen\n    // Aber wo fängt der block an? -> Wir teilen durch drei und runden ab\n    let startX = Math.floor(x / 3) * 3;\n    let startY = Math.floor(y / 3) * 3;\n    // Wir haben den Anfang, jetzt schauen wir uns alle 9 Kästchen an und hoffen, dass unsere Zahl noch nicht darin vorkommt\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            if (grid.rows[startY + i][startX + j] == n) {\n                return false;\n            }\n        }\n    }\n    // Die Zahl passt\n    return true;\n}\nfunction solve(grid, solveOne = true) {\n    // Wir schauen uns das komplette Sudoku an\n    for (let y = 0; y < 9; y++) {\n        for (let x = 0; x < 9; x++) {\n            // Ist das aktuelle Feld leer?\n            if (grid.rows[y][x] == 0) {\n                // -> Wir probiere ganz Stumpf jede Zahl von 1 bis 9 bis eine passt\n                for (let n = 1; n < 10; n++) {\n                    if (isPossible(grid, y, x, n)) {\n                        // Passt\n                        grid.rows[y][x] = n;\n                        // Jetzt lassen wir sich die Funktion immer wieder selbst aufrufen, sie wird erst aufhören zu laufen, wenn es keine leeren Kästchen mehr gibt\n                        // -> Kein leeres Kästchen -> Funktion kommt hier nicht an\n                        if (solve(grid, solveOne) !== false && solveOne === true) {\n                            return true;\n                        }\n                        // Falls wir mit der Nummer später nicht weiter machen können müssen wir aber nochmal einen Schritt zurück\n                        // Weil sich die Funktion immer wieder selbst aufgerufen hat, kann das passieren bis wir wieder ganz am Anfang sind\n                        grid.rows[y][x] = 0;\n                    }\n                }\n                // Wir haben alle Zahlen probiert aber nichts hat geklappt? -> Wir müssen wieder zurück\n                return false;\n            }\n        }\n    }\n    // Wenn wir hier ankommen ist das Sudoku gelöst :)\n    return grid;\n}\nfunction printGrid(grid) {\n    console.log("|-----------------------------------|");\n    grid.rows.forEach(row => {\n        console.log(`| ${row.join(" | ")} |`);\n        console.log("|-----------------------------------|");\n    });\n    console.log("\\n");\n}\n\n;// CONCATENATED MODULE: ./src/index.ts\n\n// Am Anfang erstellen wir einfach ein Feld und zeigen es an\nlet grid = generate(2);\nrenderGrid(grid);\n// Funktion zum erstellen des HTML\nfunction renderGrid(grid) {\n    const gridTable = document.getElementById("grid");\n    gridTable.innerHTML = "";\n    for (let y = 0; y < grid.rows.length; y++) {\n        const row = grid.rows[y];\n        let tableRow = document.createElement("tr");\n        for (let x = 0; x < row.length; x++) {\n            const value = row[x];\n            const field = document.createElement("td");\n            field.innerHTML = value.toString();\n            field.classList.add("value");\n            // Soll man das Feld bearbeiten dürfen?\n            if (value == 0) {\n                field.classList.add("editable");\n                field.setAttribute("x", x.toString());\n                field.setAttribute("y", y.toString());\n                // Feld muss auswählbar sein\n                field.addEventListener("click", () => {\n                    let values = document.getElementsByClassName("value");\n                    for (let i = 0; i < values.length; i++) {\n                        values[i].id = "";\n                    }\n                    field.id = "active";\n                });\n            }\n            tableRow.appendChild(field);\n        }\n        ;\n        gridTable.appendChild(tableRow);\n    }\n    ;\n}\n// Button um ein neues Sudoku zu erstellen\nconst generateButton = document.getElementById("generate");\ngenerateButton.addEventListener("click", () => {\n    // Wir lesen die ausgewählte Schwierigkeit aus\n    let select = (document.getElementById("difficulty"));\n    grid = generate(+select.value);\n    renderGrid(grid);\n});\n// Button zum Lösen\nconst solveButton = document.getElementById("solve");\nsolveButton.addEventListener("click", () => {\n    // Erstmal wieder alle Felder leeren damit der Spieler der Automatik keine Sackgasse bauen kann\n    const editable = document.querySelectorAll(".editable");\n    for (let i = 0; i < editable.length; i++) {\n        let x = +editable[i].getAttribute("x");\n        let y = +editable[i].getAttribute("y");\n        grid.rows[y][x] = 0;\n    }\n    solve(grid);\n    renderGrid(grid);\n});\n// Wert in aktiven Feld verändern\ndocument.addEventListener("keypress", (e) => {\n    let num = +e.key;\n    // Es muss eine Ziffer eingegeben werden\n    if (!isNaN(num)) {\n        const active = document.getElementById("active");\n        let x = +active.getAttribute("x");\n        let y = +active.getAttribute("y");\n        // Außerdem muss die Ziffer auch passen, aber auf 0 zurücksetzen darf man immer\n        if (isPossible(grid, y, x, num) || num == 0) {\n            grid.rows[y][x] = num;\n            active.innerHTML = num.toString();\n            // Wir merken uns was gelöst ist\n            num == 0 ? active.classList.remove("solved") : active.classList.add("solved");\n            // Wir prüfen wie viel noch zu lösen ist, wenn nichts mehr da ist hat der Spieler gewonnen\n            const remaining = document.querySelectorAll(".editable:not(.solved)").length;\n            if (remaining == 0) {\n                if (confirm("Gewonnen! Nochmal?")) {\n                    let select = (document.getElementById("difficulty"));\n                    grid = generate(+select.value);\n                    renderGrid(grid);\n                }\n                else {\n                    alert("Vielen Dank fürs Spielen :)");\n                }\n            }\n        }\n        else {\n            alert("Nicht möglich.");\n        }\n    }\n    else {\n        alert("Bitte eine Zahl eingeben.");\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///547\n')}},__webpack_exports__={};__webpack_modules__[547]()})();